

.. _sphx_glr_gallery_data_synthetic_checkerboard.py:


Checkerboard function
=====================

The :class:`verde.datasets.CheckerBoard` class generates synthetic data in a
checkerboard pattern. Use it like any gridder class.




.. image:: /gallery/data/images/sphx_glr_synthetic_checkerboard_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    region: (0, 5000, -5000, 0)
    wavelengths (east, north): 2500.0 2500.0
    Checkerboard value at (2000, -2500): -951.0565162951536

    Data grid:
     <xarray.Dataset>
    Dimensions:   (easting: 101, northing: 101)
    Coordinates:
      * easting   (easting) float64 0.0 50.0 100.0 150.0 200.0 250.0 300.0 350.0 ...
      * northing  (northing) float64 -5e+03 -4.95e+03 -4.9e+03 -4.85e+03 ...
    Data variables:
        scalars   (northing, easting) float64 0.0 125.3 248.7 368.1 481.8 587.8 ...
    Attributes:
        metadata:  Generated by CheckerBoard(amplitude=1000, w_east=2500.0, w_nor...

    Table of scattered data:
           northing      easting     scalars
    0 -1610.917316  2744.067520 -354.631332
    1 -3649.960134  3575.946832 -410.305405
    2 -1324.029889  3013.816880 -944.622429
    3  -189.057274  2724.415915  475.366775
    4 -3756.234282  2118.273997  818.736516




|


.. code-block:: python

    import matplotlib.pyplot as plt
    import verde as vd

    # Instantiate the data generator class and fit it to set the data region.
    synth = vd.datasets.CheckerBoard().fit()

    # Default values are provided for the region and the wavelengths of the
    # function (these are determined from the region).
    print("region:", synth.region_)
    print("wavelengths (east, north):", synth.w_east, synth.w_north)

    # The CheckerBoard class behaves like any gridder class
    print("Checkerboard value at (2000, -2500):",
          synth.predict(easting=2000, northing=-2500))

    # Generating a grid results in a xarray.Dataset
    grid = synth.grid()
    print("\nData grid:\n", grid)

    # while a random scatter generates a pandas.DataFrame
    table = synth.scatter(size=100)
    print("\nTable of scattered data:\n", table.head())

    fig = plt.figure(figsize=(5.5, 4))
    ax = plt.subplot(111)
    ax.set_title('CheckerBoard')
    ax.set_aspect('equal')
    grid.scalars.plot.pcolormesh(ax=ax)
    plt.tight_layout(pad=0)
    plt.show()

**Total running time of the script:** ( 0 minutes  0.094 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: synthetic_checkerboard.py <synthetic_checkerboard.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: synthetic_checkerboard.ipynb <synthetic_checkerboard.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
