

.. _sphx_glr_gallery_block_reduce.py:


Data decimation in blocks
=========================

When gridding data that has been highly oversampled in a direction (shipborne
and airborne data, for example), it is important to decimate the data before
interpolation to avoid aliasing. Function :func:`verde.block_reduce` decimates
data by applying a reduction operation (mean, median, mode, max, etc) to the
data in blocks. For non-smooth data, like bathymetry, a blocked median filter
is a good choice.




.. image:: /gallery/images/sphx_glr_block_reduce_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Original data size: 82970
    Decimated data size: 1801




|


.. code-block:: python

    import matplotlib.pyplot as plt
    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
    import numpy as np
    import verde as vd

    # We'll test this on the Baja California shipborne bathymetry data
    data = vd.datasets.fetch_baja_bathymetry()

    # Decimate the data using a blocked median with 10 arc-minute blocks
    lon, lat, bathymetry = vd.block_reduce(
        data.longitude, data.latitude, data.bathymetry_m,
        reduction=np.median, spacing=10/60)

    print("Original data size:", data.bathymetry_m.size)
    print("Decimated data size:", bathymetry.size)

    # Make a plot of the decimated data using Cartopy
    plt.figure(figsize=(7, 6))
    ax = plt.axes(projection=ccrs.Mercator())
    ax.set_title("10' Block Median Bathymetry", pad=25)
    # Plot the land as a solid color
    ax.add_feature(cfeature.LAND, edgecolor='black')
    # Plot the bathymetry as colored circles.
    # Cartopy requires setting the projection of the original data through the
    # transform argument. Use PlateCarree for geographic data.
    plt.scatter(lon, lat, c=bathymetry, s=5, transform=ccrs.PlateCarree())
    cb = plt.colorbar(pad=0.08)
    cb.set_label('meters')
    ax.gridlines(draw_labels=True)
    plt.tight_layout()
    plt.show()

**Total running time of the script:** ( 0 minutes  3.373 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: block_reduce.py <block_reduce.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: block_reduce.ipynb <block_reduce.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
